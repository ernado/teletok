// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"math/bits"
	"strconv"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/validate"
)

// Encode implements json.Marshaler.
func (s Data) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s Data) encodeFields(e *jx.Encoder) {
	{
		if s.AnalyzeTime.Set {
			e.FieldStart("analyze_time")
			s.AnalyzeTime.Encode(e)
		}
	}
	{
		if s.APIURL.Set {
			e.FieldStart("api_url")
			s.APIURL.Encode(e)
		}
	}
	{
		if s.NwmVideoURL.Set {
			e.FieldStart("nwm_video_url")
			s.NwmVideoURL.Encode(e)
		}
	}
	{
		if s.OriginalURL.Set {
			e.FieldStart("original_url")
			s.OriginalURL.Encode(e)
		}
	}
	{
		if s.Platform.Set {
			e.FieldStart("platform")
			s.Platform.Encode(e)
		}
	}
	{

		e.FieldStart("status")
		e.Str(s.Status)
	}
	{
		if s.URLType.Set {
			e.FieldStart("url_type")
			s.URLType.Encode(e)
		}
	}
	{
		if s.VideoAuthorDiggCount.Set {
			e.FieldStart("video_author_diggCount")
			s.VideoAuthorDiggCount.Encode(e)
		}
	}
	{
		if s.VideoAuthorFollowerCount.Set {
			e.FieldStart("video_author_followerCount")
			s.VideoAuthorFollowerCount.Encode(e)
		}
	}
	{
		if s.VideoAuthorFollowingCount.Set {
			e.FieldStart("video_author_followingCount")
			s.VideoAuthorFollowingCount.Encode(e)
		}
	}
	{
		if s.VideoAuthorHeartCount.Set {
			e.FieldStart("video_author_heartCount")
			s.VideoAuthorHeartCount.Encode(e)
		}
	}
	{
		if s.VideoAuthorID.Set {
			e.FieldStart("video_author_id")
			s.VideoAuthorID.Encode(e)
		}
	}
	{
		if s.VideoAuthorNickname.Set {
			e.FieldStart("video_author_nickname")
			s.VideoAuthorNickname.Encode(e)
		}
	}
	{
		if s.VideoAuthorVideoCount.Set {
			e.FieldStart("video_author_videoCount")
			s.VideoAuthorVideoCount.Encode(e)
		}
	}
	{
		if s.VideoAwemeID.Set {
			e.FieldStart("video_aweme_id")
			s.VideoAwemeID.Encode(e)
		}
	}
	{
		if s.VideoCommentCount.Set {
			e.FieldStart("video_comment_count")
			s.VideoCommentCount.Encode(e)
		}
	}
	{
		if s.VideoCover.Set {
			e.FieldStart("video_cover")
			s.VideoCover.Encode(e)
		}
	}
	{
		if s.VideoCreateTime.Set {
			e.FieldStart("video_create_time")
			s.VideoCreateTime.Encode(e)
		}
	}
	{
		if s.VideoDiggCount.Set {
			e.FieldStart("video_digg_count")
			s.VideoDiggCount.Encode(e)
		}
	}
	{
		if s.VideoDownloadCount.Set {
			e.FieldStart("video_download_count")
			s.VideoDownloadCount.Encode(e)
		}
	}
	{
		if s.VideoDynamicCover.Set {
			e.FieldStart("video_dynamic_cover")
			s.VideoDynamicCover.Encode(e)
		}
	}
	{
		if s.VideoHashtags != nil {
			e.FieldStart("video_hashtags")
			e.ArrStart()
			for _, elem := range s.VideoHashtags {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.VideoMusicAuthor.Set {
			e.FieldStart("video_music_author")
			s.VideoMusicAuthor.Encode(e)
		}
	}
	{
		if s.VideoMusicID.Set {
			e.FieldStart("video_music_id")
			s.VideoMusicID.Encode(e)
		}
	}
	{
		if s.VideoMusicTitle.Set {
			e.FieldStart("video_music_title")
			s.VideoMusicTitle.Encode(e)
		}
	}
	{
		if s.VideoMusicURL.Set {
			e.FieldStart("video_music_url")
			s.VideoMusicURL.Encode(e)
		}
	}
	{
		if s.VideoOriginCover.Set {
			e.FieldStart("video_origin_cover")
			s.VideoOriginCover.Encode(e)
		}
	}
	{
		if s.VideoPlayCount.Set {
			e.FieldStart("video_play_count")
			s.VideoPlayCount.Encode(e)
		}
	}
	{
		if s.VideoShareCount.Set {
			e.FieldStart("video_share_count")
			s.VideoShareCount.Encode(e)
		}
	}
	{
		if s.VideoTitle.Set {
			e.FieldStart("video_title")
			s.VideoTitle.Encode(e)
		}
	}
	{
		if s.WmVideoURL.Set {
			e.FieldStart("wm_video_url")
			s.WmVideoURL.Encode(e)
		}
	}
}

var jsonFieldsNameOfData = [31]string{
	0:  "analyze_time",
	1:  "api_url",
	2:  "nwm_video_url",
	3:  "original_url",
	4:  "platform",
	5:  "status",
	6:  "url_type",
	7:  "video_author_diggCount",
	8:  "video_author_followerCount",
	9:  "video_author_followingCount",
	10: "video_author_heartCount",
	11: "video_author_id",
	12: "video_author_nickname",
	13: "video_author_videoCount",
	14: "video_aweme_id",
	15: "video_comment_count",
	16: "video_cover",
	17: "video_create_time",
	18: "video_digg_count",
	19: "video_download_count",
	20: "video_dynamic_cover",
	21: "video_hashtags",
	22: "video_music_author",
	23: "video_music_id",
	24: "video_music_title",
	25: "video_music_url",
	26: "video_origin_cover",
	27: "video_play_count",
	28: "video_share_count",
	29: "video_title",
	30: "wm_video_url",
}

// Decode decodes Data from json.
func (s *Data) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Data to nil")
	}
	var requiredBitSet [4]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "analyze_time":
			if err := func() error {
				s.AnalyzeTime.Reset()
				if err := s.AnalyzeTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"analyze_time\"")
			}
		case "api_url":
			if err := func() error {
				s.APIURL.Reset()
				if err := s.APIURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_url\"")
			}
		case "nwm_video_url":
			if err := func() error {
				s.NwmVideoURL.Reset()
				if err := s.NwmVideoURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nwm_video_url\"")
			}
		case "original_url":
			if err := func() error {
				s.OriginalURL.Reset()
				if err := s.OriginalURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_url\"")
			}
		case "platform":
			if err := func() error {
				s.Platform.Reset()
				if err := s.Platform.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform\"")
			}
		case "status":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				v, err := d.Str()
				s.Status = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "url_type":
			if err := func() error {
				s.URLType.Reset()
				if err := s.URLType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url_type\"")
			}
		case "video_author_diggCount":
			if err := func() error {
				s.VideoAuthorDiggCount.Reset()
				if err := s.VideoAuthorDiggCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_author_diggCount\"")
			}
		case "video_author_followerCount":
			if err := func() error {
				s.VideoAuthorFollowerCount.Reset()
				if err := s.VideoAuthorFollowerCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_author_followerCount\"")
			}
		case "video_author_followingCount":
			if err := func() error {
				s.VideoAuthorFollowingCount.Reset()
				if err := s.VideoAuthorFollowingCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_author_followingCount\"")
			}
		case "video_author_heartCount":
			if err := func() error {
				s.VideoAuthorHeartCount.Reset()
				if err := s.VideoAuthorHeartCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_author_heartCount\"")
			}
		case "video_author_id":
			if err := func() error {
				s.VideoAuthorID.Reset()
				if err := s.VideoAuthorID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_author_id\"")
			}
		case "video_author_nickname":
			if err := func() error {
				s.VideoAuthorNickname.Reset()
				if err := s.VideoAuthorNickname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_author_nickname\"")
			}
		case "video_author_videoCount":
			if err := func() error {
				s.VideoAuthorVideoCount.Reset()
				if err := s.VideoAuthorVideoCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_author_videoCount\"")
			}
		case "video_aweme_id":
			if err := func() error {
				s.VideoAwemeID.Reset()
				if err := s.VideoAwemeID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_aweme_id\"")
			}
		case "video_comment_count":
			if err := func() error {
				s.VideoCommentCount.Reset()
				if err := s.VideoCommentCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_comment_count\"")
			}
		case "video_cover":
			if err := func() error {
				s.VideoCover.Reset()
				if err := s.VideoCover.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_cover\"")
			}
		case "video_create_time":
			if err := func() error {
				s.VideoCreateTime.Reset()
				if err := s.VideoCreateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_create_time\"")
			}
		case "video_digg_count":
			if err := func() error {
				s.VideoDiggCount.Reset()
				if err := s.VideoDiggCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_digg_count\"")
			}
		case "video_download_count":
			if err := func() error {
				s.VideoDownloadCount.Reset()
				if err := s.VideoDownloadCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_download_count\"")
			}
		case "video_dynamic_cover":
			if err := func() error {
				s.VideoDynamicCover.Reset()
				if err := s.VideoDynamicCover.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_dynamic_cover\"")
			}
		case "video_hashtags":
			if err := func() error {
				s.VideoHashtags = make([]DataVideoHashtagsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem DataVideoHashtagsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VideoHashtags = append(s.VideoHashtags, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_hashtags\"")
			}
		case "video_music_author":
			if err := func() error {
				s.VideoMusicAuthor.Reset()
				if err := s.VideoMusicAuthor.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_music_author\"")
			}
		case "video_music_id":
			if err := func() error {
				s.VideoMusicID.Reset()
				if err := s.VideoMusicID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_music_id\"")
			}
		case "video_music_title":
			if err := func() error {
				s.VideoMusicTitle.Reset()
				if err := s.VideoMusicTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_music_title\"")
			}
		case "video_music_url":
			if err := func() error {
				s.VideoMusicURL.Reset()
				if err := s.VideoMusicURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_music_url\"")
			}
		case "video_origin_cover":
			if err := func() error {
				s.VideoOriginCover.Reset()
				if err := s.VideoOriginCover.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_origin_cover\"")
			}
		case "video_play_count":
			if err := func() error {
				s.VideoPlayCount.Reset()
				if err := s.VideoPlayCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_play_count\"")
			}
		case "video_share_count":
			if err := func() error {
				s.VideoShareCount.Reset()
				if err := s.VideoShareCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_share_count\"")
			}
		case "video_title":
			if err := func() error {
				s.VideoTitle.Reset()
				if err := s.VideoTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_title\"")
			}
		case "wm_video_url":
			if err := func() error {
				s.WmVideoURL.Reset()
				if err := s.WmVideoURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wm_video_url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Data")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [4]uint8{
		0b00100000,
		0b00000000,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfData) {
					name = jsonFieldsNameOfData[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Data) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Data) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s DataVideoHashtagsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s DataVideoHashtagsItem) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfDataVideoHashtagsItem = [0]string{}

// Decode decodes DataVideoHashtagsItem from json.
func (s *DataVideoHashtagsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DataVideoHashtagsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DataVideoHashtagsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DataVideoHashtagsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DataVideoHashtagsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat64 to nil")
	}
	o.Set = true
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
